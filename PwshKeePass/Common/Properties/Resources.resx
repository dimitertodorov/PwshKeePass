<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InternalServerErrorMessage" xml:space="preserve">
    <value>Internal Server Error</value>
  </data>
  <data name="InvalidCertificateSingle" xml:space="preserve">
    <value>Invalid certificate format.</value>
  </data>
  <data name="InvalidFileName" xml:space="preserve">
    <value>File {0} has invalid characters</value>
  </data>
  <data name="InvalidGuid" xml:space="preserve">
    <value>The value {0} provided is not a valid GUID. Please provide a valid GUID.</value>
  </data>
  <data name="InvalidHostnameValidation" xml:space="preserve">
    <value>The specified hostname does not exist. Please specify a valid hostname for the site.</value>
  </data>
  <data name="InvalidInstancesCount" xml:space="preserve">
    <value>Role {0} instances must be greater than or equal 0 and less than or equal 20</value>
  </data>
  <data name="InvalidJobFile" xml:space="preserve">
    <value>There was an error creating your webjob. Please make sure that the script is in the root folder of the zip file.</value>
  </data>
  <data name="InvalidManifestError" xml:space="preserve">
    <value>Could not download a valid runtime manifest, Please check your internet connection and try again.</value>
  </data>
  <data name="InvalidNamespaceName" xml:space="preserve">
    <value>The provided name "{0}" does not match the service bus namespace naming rules.</value>
  </data>
  <data name="InvalidNullArgument" xml:space="preserve">
    <value>Value cannot be null. Parameter name: '{0}'</value>
  </data>
  <data name="InvalidPackagePath" xml:space="preserve">
    <value>The provided package path is invalid or doesn't exist</value>
  </data>
  <data name="InvalidParameterSetName" xml:space="preserve">
    <value>'{0}' is an invalid parameter set name.</value>
  </data>
  <data name="InvalidPath" xml:space="preserve">
    <value>{0} doesn't exist in {1} or you've not passed valid value for it</value>
  </data>
  <data name="InvalidPathName" xml:space="preserve">
    <value>Path {0} has invalid characters</value>
  </data>
  <data name="InvalidRoleNameMessage" xml:space="preserve">
    <value>The provided role name "{0}" has invalid characters</value>
  </data>
  <data name="InvalidRootNameMessage" xml:space="preserve">
    <value>A valid name for the service root folder is required</value>
  </data>
  <data name="InvalidRuntimeError" xml:space="preserve">
    <value>{0} is not a recognized runtime type</value>
  </data>
  <data name="ShouldProcessCaption" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="YesHint" xml:space="preserve">
    <value>Yes, I agree</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>&lt;NONE&gt;</value>
  </data>
  <data name="CertificateNotFoundInStore" xml:space="preserve">
    <value>No certificate was found in the certificate store with thumbprint {0}</value>
  </data>
  <data name="IllegalPath" xml:space="preserve">
    <value>Illegal characters in path.</value>
  </data>
  <data name="InvalidCertificate" xml:space="preserve">
    <value>Invalid certificate format. Publish settings may be corrupted. Use Get-AzurePublishSettingsFile to download updated settings</value>
  </data>
  <data name="InvalidDnsName" xml:space="preserve">
    <value>"{0}" is an invalid DNS name for {1}</value>
  </data>
  <data name="InvalidFileExtension" xml:space="preserve">
    <value>The provided file in {0} must be have {1} extension</value>
  </data>
  <data name="InvalidOrEmptyArgumentMessage" xml:space="preserve">
    <value>{0} is invalid or empty</value>
  </data>
  <data name="NoInternetConnection" xml:space="preserve">
    <value>Please connect to internet before executing this cmdlet</value>
  </data>
  <data name="PathDoesNotExist" xml:space="preserve">
    <value>Path {0} doesn't exist.</value>
  </data>
  <data name="PathDoesNotExistForElement" xml:space="preserve">
    <value>Path for {0} doesn't exist in {1}.</value>
  </data>
  <data name="ServiceNameExists" xml:space="preserve">
    <value>The provided service name {0} already exists, please pick another name</value>
  </data>
  <data name="UnableToPatchJson" xml:space="preserve">
    <value>Unable to update mismatching Json structured: {0} {1}.</value>
  </data>
  <data name="x86InProgramFiles" xml:space="preserve">
    <value>(x86)</value>
  </data>
  <data name="BaseShouldMethodFailureReason" xml:space="preserve">
    <value>Execution failed because a background thread could not prompt the user.</value>
  </data>
  <data name="LROJobName" xml:space="preserve">
    <value>PwshKeePass Long-Running Job</value>
  </data>
  <data name="LROTaskExceptionMessage" xml:space="preserve">
    <value>The cmdlet failed in background execution.  The returned error was '{0}'.  Please execute the cmdlet again.  You may need to execute this cmdlet synchronously, by omitting the '-AsJob' parameter.</value>
    <comment>0(string): exception message in background task</comment>
  </data>
  <data name="ShouldContinueFail" xml:space="preserve">
    <value>Please execute the cmdlet again and include the 'Force' parameter, if available, to avoid unnecessary prompts.</value>
  </data>
  <data name="ShouldProcessFailConfirm" xml:space="preserve">
    <value>Please execute the cmdlet again and omit the 'Confirm' parameter when using the 'AsJob' parameter.</value>
  </data>
  <data name="ShouldProcessFailImpact" xml:space="preserve">
    <value>Please increase the user $ConfirmPreference setting, or include turn off confirmation using '-Confirm:$false' when using the 'AsJob' parameter and execute the cmdet again.</value>
  </data>
  <data name="ShouldProcessFailWhatIf" xml:space="preserve">
    <value>Please execute the cmdlet again and omit the 'WhatIf' parameter when using the 'AsJob' parameter.</value>
  </data>
  <data name="TraceBeginLROJob" xml:space="preserve">
    <value>[KeePassLongRunningJob]: Starting cmdlet execution, setting for cmdlet confirmation required: '{0}'</value>
    <comment>0(bool): whether cmdlet confirmation is required</comment>
  </data>
  <data name="TraceBlockLROThread" xml:space="preserve">
    <value>[KeePassLongRunningJob]: Blocking job for ShouldMethod '{0}'</value>
    <comment>0(string): method type</comment>
  </data>
  <data name="TraceEndLROJob" xml:space="preserve">
    <value>[KeePassLongRunningJob]: Completing cmdlet execution in RunJob</value>
  </data>
  <data name="TraceHandleLROStateChange" xml:space="preserve">
    <value>[KeePassLongRunningJob]: State change from '{0}' to '{1}' because '{2}'</value>
    <comment>0(string): last state, 1(string): new state, 2(string): state change reason</comment>
  </data>
  <data name="TraceHandlerCancelJob" xml:space="preserve">
    <value>[KeePassLongRunningJob]: Unblocking job due to stoppage or failure</value>
  </data>
  <data name="TraceHandlerUnblockJob" xml:space="preserve">
    <value>[KeePassLongRunningJob]: Unblocking job that was previously blocked.</value>
  </data>
  <data name="TraceLROJobException" xml:space="preserve">
    <value>[KeePassLongRunningJob]: Error in cmdlet execution</value>
  </data>
  <data name="TraceRemoveLROEventHandler" xml:space="preserve">
    <value>[KeePassLongRunningJob]: Removing state changed event handler, exception '{0}'</value>
    <comment>0(string): exception message</comment>
  </data>
  <data name="TraceUnblockLROThread" xml:space="preserve">
    <value>[KeePassLongRunningJob]: ShouldMethod '{0}' unblocked.</value>
    <comment>0(string): methodType</comment>
  </data>
</root>